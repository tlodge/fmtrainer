{"version":3,"sources":["features/train/Train.module.css","logo.svg","features/counter/Counter.module.css","features/counter/counterSlice.js","features/train/trainSlice.js","features/train/components/Main/Main.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","record","gesture","axios","method","url","encodeURIComponent","STATUSES","COUNTDOWN","INSTRUCTIONS","trainSlice","amListening","status","instructions","rawTranscript","setStatus","setRawTranscript","reset","startedListening","amFinished","issueConfirm","readytorecord","toLowerCase","setGesture","trim","index","indexOf","substring","getGesture","train","getStatus","getInstructions","getListening","getRawTranscript","handleGesture","dispatch","getState","startCountdown","console","log","setTimeout","Main","BrowserSpeechRecognition","window","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","recognition","continous","interimResults","lang","useSelector","amRecording","useDispatch","finalTranscript","interimTranscript","onend","start","onresult","event","i","resultIndex","results","length","transcript","isFinal","style","padding","height","src","fontSize","fontWeight","textTransform","marginBottom","color","dangerouslySetInnerHTML","__html","id","className","styles","button","onClick","footer","App","configureStore","reducer","counter","counterReducer","trainReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb9cb0ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Train_button__2wHuI\",\"footer\":\"Train_footer__WmYe4\"};","module.exports = __webpack_public_path__ + \"static/media/logo.8dad8028.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst sendit =  ()=>{\n  axios({\n    method:\"post\",\n    url : '/set_gesture',\n    data : {\n        hello: \"world\"\n    }\n  });\n}\n\nconst record = (gesture)=>{\n  axios({\n   method:\"get\",\n   url : encodeURIComponent(`/record/${gesture}`),\n  });\n}\n\nconst train = ()=>{\n axios({\n   method:\"get\",\n   url : '/train',\n  });\n}\n\nconst done = ()=>{\n axios({\n   method:\"get\",\n   url : '/done',\n  });\n}\n\nconst STATUSES = {\n    \"NOT_LISTENING\" : \"not listening\",\n    \"AWAITING_GESTURE\" : \"awaiting gesture\",\n    \"AWAITING_CONFIRMATION\" : \"awaiting confirmation\",\n    \"FIVE\" : \"5\",\n    \"FOUR\" : \"4\",\n    \"THREE\" : \"3\",\n    \"TWO\" : \"2\",\n    \"ONE\" : \"1\",\n    \"RECORDING\": \"recording\"\n}\n\nconst COUNTDOWN = [\"FIVE\", \"FOUR\", \"THREE\", \"TWO\", \"ONE\", \"RECORDING\"];\n\nconst INSTRUCTIONS = {\n  \"NOT_LISTENING\"         : \"press button to start listening for instructions\",\n  \"AWAITING_GESTURE\"      : `say <strong>train</strong> followed by the <strong><i>name of the gesture</i></strong> you'd like to train`,\n  \"AWAITING_CONFIRMATION\" : `say <strong>ready</strong> to start recording a gesture with this name or <strong>cancel</strong> to restate gesture`,\n  \"FIVE\" : \"recording in <strong>five</strong> seconds...\",\n  \"FOUR\" : \"recording in <strong>four</strong> seconds...\",\n  \"THREE\" : \"recording in <strong>three</strong> seconds...\",\n  \"TWO\" : \"recording in <strong>two</strong> seconds...\",\n  \"ONE\" : \"recording in <strong>one</strong> second!\",\n  \"RECORDING\" : `record gesture, say <strong>ok</strong> or <strong>done</strong> when done, or <strong>cancel</strong> to discard`, \n}\n\nexport const trainSlice = createSlice({\n  name: 'train',\n\n  initialState: {\n    amListening: false,\n    status: STATUSES[\"NOT_LISTENING\"],\n    instructions: INSTRUCTIONS[\"NOT_LISTENING\"],\n    gesture: \"\",\n    rawTranscript: \"\",\n  },\n  \n  reducers: {\n\n    setStatus: (state, action)=>{\n      state.status = STATUSES[action.payload];\n      state.instructions = INSTRUCTIONS[action.payload];\n    },\n\n    setRawTranscript: (state, action)=>{\n      state.rawTranscript = action.payload;\n    },\n\n    reset: (state, action)=>{\n      state.status       = STATUSES[\"AWAITING_GESTURE\"]\n      state.instructions =  INSTRUCTIONS[\"AWAITING_GESTURE\"] \n      state.gesture = \"\"\n    },\n\n    startedListening: (state, action)=>{\n      if (action.payload){\n        state.amFinished = false;\n        state.amListening = true;\n        state.status       = STATUSES[\"AWAITING_GESTURE\"]\n        state.instructions =  INSTRUCTIONS[\"AWAITING_GESTURE\"] \n      }else{\n        state.status = STATUSES[\"NOT_LISTENING\"]\n        state.instructions =  INSTRUCTIONS[\"NOT_LISTENING\"] \n      }\n    },\n    issueConfirm: (state, action) => {\n      state.readytorecord = action.payload.toLowerCase() === \"yes\";\n    },\n    setGesture: (state, action) => {\n     \n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      if (action.payload.trim() === \"\"){\n        return;\n      }\n\n      const index = action.payload.toLowerCase().indexOf(\"train\");\n      \n      if (index !== -1){\n        state.gesture  = `${action.payload.substring(index+5).trim()}`;\n        state.status=  STATUSES[\"AWAITING_CONFIRMATION\"]\n        state.instructions =  INSTRUCTIONS[\"AWAITING_CONFIRMATION\"]\n      }//else{\n       // state.command = \"\";\n      //}\n    },\n  },\n});\n\nexport const {setGesture, setStatus, startedListening, amListening, reset, setRawTranscript } = trainSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const getGesture = state => state.train.gesture;\nexport const getStatus =  state => state.train.status;\nexport const getInstructions = state => state.train.instructions;\nexport const getListening = state => state.train.amListening;\nexport const getRawTranscript = state => state.train.rawTranscript;\n\nexport const handleGesture = (action) => (dispatch, getState) =>{\n\n  const state = getState().train;\n  \n  dispatch(setRawTranscript(action.toLowerCase().trim()));\n\n  if ([\"done\", \"ok\"].indexOf(action.toLowerCase().trim()) !== -1){\n     dispatch(reset());\n     done();\n     return;\n  }\n\n  if (action.toLowerCase().trim()===\"cancel\"){\n    dispatch(reset());\n    return;\n  }\n\n  if (state.status===STATUSES[\"AWAITING_CONFIRMATION\"]){ \n    if (action.toLowerCase().trim()===\"ready\"){\n      dispatch(setStatus(\"RECORDING_COUNTDOWN\"));\n      dispatch(startCountdown(state));\n      return;\n    }\n  }\n  dispatch(setGesture(action));\n}\n\nexport const startCountdown = (state, index=0) => dispatch =>{\n\n    dispatch(setStatus(COUNTDOWN[index]));  \n    \n    if (index==5){\n      console.log(\"calling record with \", state);\n      record(state.gesture);\n    }    \n  \n    if (index<5){\n      setTimeout(()=>startCountdown(state, ++index)(dispatch), 1000);\n    }\n}\n\n\nexport default trainSlice.reducer;\n","import React, { useState, useEffect, useImperativeHandle } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    getListening,\n    getGesture,\n    getStatus,\n    getRawTranscript,\n    getInstructions,\n    handleGesture,\n    startedListening,\n} from '../../trainSlice';\nimport styles from '../../Train.module.css';\n\n//-----------------SPEECH RECOGNITION SETUP---------------------\n\n//------------------------COMPONENT-----------------------------\n\n\nexport default function Main() {\n    const BrowserSpeechRecognition =\n    typeof window !== 'undefined' &&\n    (window.SpeechRecognition ||\n      window.webkitSpeechRecognition ||\n      window.mozSpeechRecognition ||\n      window.msSpeechRecognition ||\n      window.oSpeechRecognition)\n\nconst recognition = BrowserSpeechRecognition ? new BrowserSpeechRecognition() : null\nrecognition.continous = true\nrecognition.interimResults = true\nrecognition.lang = 'en-US'\n\n\n  const gesture = useSelector(getGesture);\n  const instructions = useSelector(getInstructions);\n  const amListening = useSelector(getListening);\n  const rawTranscript = useSelector(getRawTranscript);\n  const amRecording = useSelector(getStatus) === \"recording\";\n\n  const dispatch = useDispatch();\n  let finalTranscript = '', interimTranscript='';\n\n  recognition.onend = () => {\n    finalTranscript = \"\";\n    recognition.start();\n    //dispatch(startedListening(false));\n    //handleListen();\n    //}else{\n    //  console.log(\"not calling restart!!\");\n    //}\n  }\n\n  recognition.onresult = event => {    \n        \n    interimTranscript = ''\n    \n    for (let i = event.resultIndex; i < event.results.length; i++) {\n      const transcript = event.results[i][0].transcript;\n      if (event.results[i].isFinal){ \n        finalTranscript += transcript + ' ';\n      }\n      else{ \n        interimTranscript += transcript;\n        dispatch(handleGesture(interimTranscript));\n      }\n    }\n    dispatch(handleGesture(finalTranscript));\n  }\n  //useEffect(() => {\n    //setTimeout(()=>setListening(false), 5000);\n  //}, []);\n \n\n\n  const handleListen = ()=>{ \n      // handle speech recognition here\n      finalTranscript = \"\";\n      console.log(\"in handle listener: am listening\", amListening);\n      \n      if (!amListening) {\n        dispatch(startedListening(true));\n        console.log(\"OK STARTING LISTENING!\");\n        recognition.start();\n      } \n  } \n\n  return (\n    <>\n      <div style={{padding:\"0px 100px 100px 100px\"}}>\n        {amRecording && <img height=\"600px\" src=\"/video_feed\"/>}\n        <div style={{fontSize:80, fontWeight:700, textTransform:\"uppercase\", marginBottom:30}}>{gesture}</div>\n        {amListening && <div style={{color:\"#736A6A\"}} dangerouslySetInnerHTML={{__html:instructions}}/>}\n        {!amListening && <button id='microphone-btn' className={styles.button} onClick={handleListen}>START LISTENING</button>}\n       \n    </div>\n     {rawTranscript.trim()!=\"\" && <div className={styles.footer}>{`\"${rawTranscript}\"`}</div>}\n     </>\n  );\n}\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport { Counter } from './features/counter/Counter';\r\nimport Main from './features/train/components/Main';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n       \r\n       \r\n        <Main/>\r\n    </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport trainReducer from '../features/train/trainSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    train: trainReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}